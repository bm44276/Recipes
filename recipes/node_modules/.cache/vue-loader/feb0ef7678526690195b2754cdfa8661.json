{"remainingRequest":"C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\src\\views\\AboutUs.vue?vue&type=template&id=5f954f7e&scoped=true&","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\src\\views\\AboutUs.vue","mtime":1627416378711},{"path":"C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1627304783166},{"path":"C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1627304840633},{"path":"C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1627304783166},{"path":"C:\\Users\\Admin\\Desktop\\Recipes\\recipes\\node_modules\\vue-loader\\lib\\index.js","mtime":1627304840628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}